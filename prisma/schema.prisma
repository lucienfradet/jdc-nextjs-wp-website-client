// This is your Prisma schema file
// !! Prisma currently always converts time to UTC before storing...
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id               Int      @id @default(autoincrement())
  email            String   
  firstName        String
  lastName         String
  phone            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  orders           Order[]

  @@index([email]) // Add an index for faster lookups by email
}

model Order {
  id                String    @id @default(uuid())
  orderNumber       String    @unique
  
  // Customer relationship
  customerId        Int
  customer          Customer  @relation(fields: [customerId], references: [id])
  
  // Billing address
  billingAddress1   String?
  billingAddress2   String?
  billingCity       String?
  billingState      String?
  billingPostcode   String?
  billingCountry    String?   @default("CA")
  
  // Shipping address
  shippingSameAsBilling Boolean @default(true)
  shippingAddress1  String?
  shippingAddress2  String?
  shippingCity      String?
  shippingState     String?
  shippingPostcode  String?
  shippingCountry   String?   @default("CA")
  
  // Order status
  status            String    @default("pending") // pending, processing, completed, cancelled, etc.
  
  // Payment details
  paymentStatus     String    @default("pending") // pending, paid, failed, refunded, etc.
  paymentMethod     String    // stripe, bank-transfer, etc.
  paymentIntentId   String?   @unique  // Make this unique for lookup by webhook

  // WooCommerce synchronization
  wcOrderId         String?   // WooCommerce order ID
  
  // Financial details
  subtotal          Decimal   @db.Decimal(10, 2)
  tax               Decimal   @db.Decimal(10, 2)
  taxDetails        String?   @db.Text // JSON with detailed tax breakdown
  shipping          Decimal   @db.Decimal(10, 2)
  total             Decimal   @db.Decimal(10, 2)
  
  // Delivery details
  deliveryMethod    String    @default("shipping") // shipping, pickup
  pickupLocationId  Int?
  pickupLocation    PickupLocation? @relation(fields: [pickupLocationId], references: [id])
  
  // Notes
  notes             String?   @db.Text  // Customer notes about the order
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Items
  items             OrderItem[]

  @@index([paymentIntentId]) // Add an index for faster lookups by paymentIntentId
  @@index([orderNumber]) // Add an index for faster lookups by orderNumber
  @@index([wcOrderId]) // Add an index for faster lookups by WooCommerce order ID
}

model OrderItem {
  id             Int      @id @default(autoincrement())
  orderId        String
  order          Order    @relation(fields: [orderId], references: [id])
  productId      Int
  name           String
  price          Decimal  @db.Decimal(10, 2)
  quantity       Int
  subtotal       Decimal  @db.Decimal(10, 2)
  tax            Decimal  @db.Decimal(10, 2)
  total          Decimal  @db.Decimal(10, 2)
  shippingClass  String?  // Track if it was shipping or pickup-only
  isPickupOnly   Boolean  @default(false)
  createdAt      DateTime @default(now())
}

model PickupLocation {
  id                  Int      @id @default(autoincrement())
  wordpressId         Int      @unique // For matching with WordPress data
  name                String
  address             String
  city                String
  state               String
  postalCode          String
  country             String   @default("CA")
  description         String?  @db.Text
  isActive            Boolean  @default(true)
  orders              Order[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
